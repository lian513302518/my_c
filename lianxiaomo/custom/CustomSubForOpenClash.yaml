# 注意规则在满足自己需求情况下，尽量做到精简，不要过度复杂，以免影响性能。
# 机场订阅
proxy-providers:

  牛逼:
    url: "http://8.138.135.231:8090/api/v1/client/subscribe?token=02268dc19d124869f522750a7f174678"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连

#  红杏:
#    url: "https://hongxingdl.love/hxyunvip?token=b3b27e8485a6f013165a85df208ca029"
#    type: http
#    interval: 86400
#    health-check:
#      enable: true
#      url: https://www.gstatic.com/generate_204
#      interval: 300
#    proxy: 直连

#  龙猫:
#    url: "https://linka.lmscunb.cc:2087/api/v1/client/subscribe?token=16f9ce7500f7d5f441e63393e357c408"
#    type: http
#    interval: 86400
#    health-check:
#      enable: true
#      url: https://www.gstatic.com/generate_204
#      interval: 300
#    proxy: 直连

#  KTM:
#    url: "https://ktm.qeayr.cn/api/v1/client/subscribe?token=596a0a12546522bdec072f71f297b184"
#    type: http
#    interval: 86400
#    health-check:
#      enable: true
#      url: https://www.gstatic.com/generate_204
#      interval: 300
#    proxy: 直连

# 节点信息
proxies:
  - { name: 直连, type: direct }
  - { name: 拒绝, type: reject }

# 全局配置
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
allow-lan: true
bind-address: "*"
ipv6: false
unified-delay: true
tcp-concurrent: true
log-level: warning
find-process-mode: 'off'
# interface-name: en0
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 15
disable-keep-alive: false
profile:
  store-selected: true
  store-fake-ip: true

# 控制面板
external-controller: 0.0.0.0:9090
secret: ""
external-ui: "/etc/openclash/ui"
external-ui-name: zashboard
external-ui-url: "https://github.moeyy.xyz/https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip"

# 嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [ 80, 8080-8880 ]
      override-destination: true
    TLS:
      ports: [ 443, 8443 ]
    QUIC:
      ports: [ 443, 8443 ]
  force-domain:
    - "+.v2ex.com"
  skip-domain:
    - "rule-set:private_domain,cn_domain"

# 入站
tun:
  enable: true
  stack: gvisor
  device: utun
  endpoint-independent-nat: true
  auto-route: false
  auto-detect-interface: false
  auto-redirect: false
  strict-route: false


# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: false
  respect-rules: true
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "rule-set:private_domain,cn_domain"  # 如果你确定支持 rule-set
    - "+.msftconnecttest.com"
    - "+.msftncsi.com"
    - "+.time.windows.com"
    - "+.time.apple.com"
  default-nameserver:
    - 223.5.5.5
  proxy-server-nameserver:
    - https://223.5.5.5/dns-query
  # namesever尽量用运营商提供的DNS
  nameserver:
    - 223.5.5.5       # 阿里 DNS，主用
    - 119.29.29.29    # 腾讯 DNSPod，备选
    - 8.8.8.8         # Google DNS（若可访问）
    - 1.1.1.1         # Cloudflare DNS（速度快，隐私强）

# 出站策略
# 注意锚点必须放在引用的上方，可以集中把锚点全部放yaml的顶部。
pr: &pr { type: select, proxies: [ 🚀 默认代理,🇭🇰🚧 香港-故转,🇭🇰♻️ 香港-自动,🇹🇼🚧 台湾-故转,🇹🇼♻️ 台湾-自动,🇸🇬🚧 新加坡-故转, 🇸🇬♻️ 新加坡-自动,🇯🇵🚧 日本-故转, 🇰🇷🚧 韩国-故转,🇰🇷♻️ 韩国-自动,🇺🇸🚧 美国-故转, 🇺🇸♻️ 美国-自动, 🌐🫱 所有-手动,🌐♻️ 所有-自动, 直连 ] }
proxy-groups:
  - { name: 🎯 直连, type: select, proxies: [ 直连, 🚀 默认代理 ] }
  - { name: 🚀 默认代理, type: select, proxies: [ 🇭🇰♻️ 香港-自动, 🇭🇰🚧 香港-故转,🇹🇼🚧 台湾-故转,🇹🇼♻️ 台湾-自动,🇸🇬🚧 新加坡-故转, 🇸🇬♻️ 新加坡-自动,🇯🇵🚧 日本-故转, 🇰🇷🚧 韩国-故转,🇰🇷♻️ 韩国-自动,🇺🇸🚧 美国-故转, 🇺🇸♻️ 美国-自动, 🌐🫱 所有-手动,🌐♻️ 所有-自动, 直连 ] }

  - { name: 🤖 AI,type: select, proxies: [ 🇹🇼🚧 台湾-故转,🇹🇼♻️ 台湾-自动,🇭🇰🚧 香港-故转,🇭🇰♻️ 香港-自动,🇸🇬🚧 新加坡-故转, 🇸🇬♻️ 新加坡-自动,🇯🇵🚧 日本-故转, 🇰🇷🚧 韩国-故转,🇰🇷♻️ 韩国-自动,🇺🇸🚧 美国-故转, 🇺🇸♻️ 美国-自动, 🌐🫱 所有-手动,🌐♻️ 所有-自动, 直连 ] }
  - { name: 🤖 Perplexity,type: select, proxies: [ 🇸🇬🚧 新加坡-故转, 🇸🇬♻️ 新加坡-自动, 🇭🇰🚧 香港-故转,🇭🇰♻️ 香港-自动,🇹🇼🚧 台湾-故转,🇹🇼♻️ 台湾-自动,🇯🇵🚧 日本-故转, 🇰🇷🚧 韩国-故转,🇰🇷♻️ 韩国-自动,🇺🇸🚧 美国-故转, 🇺🇸♻️ 美国-自动, 🌐🫱 所有-手动,🌐♻️ 所有-自动, 直连 ] }
  - { name: 📲 Telegram,type: select, proxies: [ 🇭🇰🚧 香港-故转,🇭🇰♻️ 香港-自动 ] }
  - { name: 🍎 Apple, type: select, proxies: [ 🎯 直连, 🚀 默认代理 ] }
  - { name: 🪟 Microsoft, type: select, proxies: [ 🎯 直连, 🚀 默认代理 ] }
  - { name: 📹 YouTube, <<: *pr }
  - { name: 🍀 Google, <<: *pr }
  - { name: 👨🏿‍💻 GitHub, <<: *pr }
  - { name: ✈️ Speedtest, <<: *pr }
  - { name: 🐟 漏网之鱼, <<: *pr }
  #  - {name: 🎵 TikTok, <<: *pr}
  #  - {name: 🎥 NETFLIX, <<: *pr}
  #  - {name: 💶 PayPal, <<: *pr}

  - { name: 🇭🇰🚧 香港-故转, type: fallback, interval: 300, lazy: false, proxies: [ 🇭🇰🫱 香港-手动, 🇭🇰♻️ 香港-自动 ] }
  - { name: 🇭🇰🫱 香港-手动, type: select, include-all: true, filter: "^(?=.*(?i)(港|hk|(?i)hong))((?!测试)(?!异常)(?!过滤)(?!官网)(?!建议)(?!流量)(?!距离)(?!套餐)(?!最新).)*$" }
  - { name: 🇭🇰♻️ 香港-自动, type: url-test, include-all: true, tolerance: 50, interval: 300, filter: "^(?=.*(?i)(港|hk|(?i)hong))((?!测试)(?!异常)(?!过滤)(?!官网)(?!建议)(?!流量)(?!距离)(?!套餐)(?!最新).)*$" }

  - { name: 🇹🇼🚧 台湾-故转, type: fallback, interval: 300, lazy: false, proxies: [ 🇹🇼🫱 台湾-手动, 🇹🇼♻️ 台湾-自动 ] }
  - { name: 🇹🇼🫱 台湾-手动, type: select, include-all: true, filter: "^(?=.*(?i)(台湾|tw|(?i)Taiwan))((?!测试)(?!异常)(?!过滤)(?!官网)(?!建议)(?!流量)(?!距离)(?!套餐)(?!最新).)*$" }
  - { name: 🇹🇼♻️ 台湾-自动, type: url-test, include-all: true, tolerance: 50, interval: 300, filter: "^(?=.*(?i)(台湾|tw|(?i)Taiwan))((?!测试)(?!异常)(?!过滤)(?!官网)(?!建议)(?!流量)(?!距离)(?!套餐)(?!最新).)*$" }

  - { name: 🇸🇬🚧 新加坡-故转, type: fallback, interval: 300, lazy: false, proxies: [ 🇸🇬🫱 新加坡-手动, 🇸🇬♻️ 新加坡-自动 ] }
  - { name: 🇸🇬🫱 新加坡-手动, type: select, include-all: true, filter: "^(?=.*(?i)(新加坡|SG|(?i)Singapore))((?!测试)(?!异常)(?!过滤)(?!官网)(?!建议)(?!流量)(?!距离)(?!套餐)(?!最新).)*$" }
  - { name: 🇸🇬♻️ 新加坡-自动, type: url-test, include-all: true, tolerance: 50, interval: 300, filter: "^(?=.*(?i)(新加坡|SG|(?i)Singapore))((?!测试)(?!异常)(?!过滤)(?!官网)(?!建议)(?!流量)(?!距离)(?!套餐)(?!最新).)*$" }

  - { name: 🇯🇵🚧 日本-故转, type: fallback, interval: 300, lazy: false, proxies: [ 🇯🇵🫱 日本-手动, 🇯🇵♻️ 日本-自动 ] }
  - { name: 🇯🇵🫱 日本-手动, type: select, include-all: true, filter: "^(?=.*(?i)(日本|JP|(?i)Japan))((?!测试)(?!异常)(?!过滤)(?!官网)(?!建议)(?!流量)(?!距离)(?!套餐)(?!最新).)*$" }
  - { name: 🇯🇵♻️ 日本-自动, type: url-test, include-all: true, tolerance: 50, interval: 300, filter: "^(?=.*(?i)(日本|JP|(?i)Japan))((?!测试)(?!异常)(?!过滤)(?!官网)(?!建议)(?!流量)(?!距离)(?!套餐)(?!最新).)*$" }

  - { name: 🇰🇷🚧 韩国-故转, type: fallback, interval: 300, lazy: false, proxies: [ 🇰🇷🫱 韩国-手动, 🇰🇷♻️ 韩国-自动 ] }
  - { name: 🇰🇷🫱 韩国-手动, type: select, include-all: true, filter: "^(?=.*(?i)(韩国|KR|(?i)Korea))((?!测试)(?!异常)(?!过滤)(?!官网)(?!建议)(?!流量)(?!距离)(?!套餐)(?!最新).)*$" }
  - { name: 🇰🇷♻️ 韩国-自动, type: url-test, include-all: true, tolerance: 50, interval: 300, filter: "^(?=.*(?i)(韩国|KR|(?i)Korea))((?!测试)(?!异常)(?!过滤)(?!官网)(?!建议)(?!流量)(?!距离)(?!套餐)(?!最新).)*$" }

  - { name: 🇺🇸🚧 美国-故转, type: fallback, interval: 300, lazy: false, proxies: [ 🇺🇸🫱 美国-手动, 🇺🇸♻️ 美国-自动 ] }
  - { name: 🇺🇸🫱 美国-手动, type: select, include-all: true, filter: "^(?=.*(?i)(美|US|(?i)States|America))((?!测试)(?!异常)(?!过滤)(?!官网)(?!建议)(?!流量)(?!距离)(?!套餐)(?!最新).)*$" }
  - { name: 🇺🇸♻️ 美国-自动, type: url-test, include-all: true, tolerance: 50, interval: 300, filter: "^(?=.*(?i)(美|US|(?i)States|America))((?!测试)(?!异常)(?!过滤)(?!官网)(?!建议)(?!流量)(?!距离)(?!套餐)(?!最新).)*$" }

  - { name: 🌐🫱 所有-手动, type: select, include-all: true,filter: "^((?!(直连|过滤|拒绝|建议|测试|官网|异常|流量|距离|套餐|最新)).)*$" }
  - { name: 🌐♻️ 所有-自动, type: url-test, include-all: true, tolerance: 50, interval: 300, filter: "^((?!(直连|过滤|拒绝|建议|测试|官网|异常|流量|距离|套餐|最新)).)*$" }


# 规则匹配
# 顺序匹配，靠前的优先匹配，匹配到走策略
rules:
  #解决谷歌商店应用无法下载
  - DOMAIN-SUFFIX,services.googleapis.cn,直连
  - DOMAIN-SUFFIX,googleapis.cn,直连
  - DOMAIN-SUFFIX,xn--ngstr-lra8j.com,直连

  - RULE-SET,private_domain,直连
  - RULE-SET,perplexity_domain,🤖 Perplexity
  - RULE-SET,ai,🤖 AI
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,speedtest_domain,✈️ Speedtest
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,apple_domain,🍎 Apple
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,microsoft_domain,🪟 Microsoft
  - RULE-SET,google_ip,🍀 Google,no-resolve
  - RULE-SET,gfw_domain,🚀 默认代理
  - RULE-SET,geolocation-!cn,🚀 默认代理
  - RULE-SET,cn_domain,🎯 直连
  - RULE-SET,cn_ip,🎯 直连,no-resolve
  - MATCH,🐟 漏网之鱼
  #  - RULE-SET,tiktok_domain,🎵 TikTok
  #  - RULE-SET,netflix_domain,🎥 NETFLIX
  #  - RULE-SET,paypal_domain,💶 PayPal
  #  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve

# 规则集
rule-anchor:
  ip: &ip { type: http, interval: 86400, behavior: ipcidr, format: mrs }
  domain: &domain { type: http, interval: 86400, behavior: domain, format: mrs }
  class: &class { type: http, interval: 86400, behavior: classical, format: text }
rule-providers:
  private_domain: { <<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs" }
  ai: { <<: *domain, url: "https://github.moeyy.xyz/https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-!cn.mrs" }
  youtube_domain: { <<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs" }
  google_domain: { <<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs" }
  github_domain: { <<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs" }
  telegram_domain: { <<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs" }
  telegram_ip: { <<: *ip, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs" }
  perplexity_domain: { <<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/perplexity.mrs" }
  microsoft_domain: { <<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs" }
  apple_domain: { <<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs" }
  speedtest_domain: { <<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs" }
  gfw_domain: { <<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs" }
  geolocation-!cn: { <<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs" }
  cn_domain: { <<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs" }
  cn_ip: { <<: *ip, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs" }
  google_ip: { <<: *ip, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs" }

  #  tiktok_domain: { <<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  #  netflix_domain: { <<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"}
  #  paypal_domain: { <<: *domain, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs"}
#  netflix_ip: { <<: *ip, url: "https://github.moeyy.xyz/https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"}
